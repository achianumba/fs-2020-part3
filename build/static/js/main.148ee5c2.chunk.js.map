{"version":3,"sources":["transactions.js","index.js"],"names":["baseUrl","axios","get","contact","post","id","put","delete","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","search","setSearch","results","setResults","content","type","message","setMessage","showNotification","msg","t","setTimeout","useEffect","transactions","then","res","data","className","handleSearch","e","preventDefault","target","value","filter","person","RegExp","test","name","submit","duplicateName","some","duplicateNumber","number","numberUpdate","find","undefined","catch","err","console","error","response","contactName","window","confirm","concat","log","setName","setNumber","deleteContact","closest","firstChild","textContent","contactId","dataset","SearchFilter","htmlFor","onChange","AddPerson","onSubmit","Contacts","onClick","map","key","data-id","ReactDOM","render","document","getElementById"],"mappings":"mPACMA,EAAU,eAUD,EARK,kBAAOC,IAAMC,IAAIF,IAQtB,EANI,SAAAG,GAAO,OAAIF,IAAMG,KAAKJ,EAASG,IAMnC,EAJO,SAACE,EAAIF,GAAL,OAAiBF,IAAMK,IAAN,UAAaN,EAAb,YAAwBK,GAAMF,IAItD,EAFO,SAAAE,GAAE,OAAIJ,IAAMM,OAAN,UAAgBP,EAAhB,YAA2BK,KCAjDG,EAAM,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGkBJ,mBAAS,IAH3B,mBAGTK,EAHS,KAGEC,EAHF,OAIYN,mBAAS,IAJrB,mBAITO,EAJS,KAIDC,EAJC,OAKcR,mBAAS,GALvB,mBAKTS,EALS,KAKAC,EALA,OAMcV,mBAAS,CAAEW,QAAS,GAAIC,KAAM,KAN5C,mBAMTC,EANS,KAMAC,EANA,KASVC,EAAmB,SAACC,EAAKC,GAC7BH,EAAW,CAAEH,QAAUK,EAAKJ,KAAMK,IAClCC,YAAW,kBAAMJ,EAAW,CAC1BH,QAAS,GACTC,KAAM,OACJ,MA0FN,OALAO,qBAAU,WACRC,EAAyB,iCACxBC,MAAK,SAAAC,GAAG,OAAIpB,EAAWoB,EAAIC,WAC3B,IAGD,yBAAK3B,GAAG,aACN,yCAEsB,KAApBiB,EAAQF,QACR,uBAAGa,UAAS,0BAAqBX,EAAQD,OAAUC,EAAQF,SAC3D,GAEF,yBAAKf,GAAG,QACN,kBAAC,EAAD,CAAc6B,aAjDC,SAACC,GAGpB,GAFAA,EAAEC,iBAEqB,IAAnBD,EAAEE,OAAOC,MAAa,OAAOnB,EAAW,GAE5CF,EAAUkB,EAAEE,OAAOC,OACnB,IAAIpB,EAAUR,EAAQ6B,QAAO,SAACC,GAAD,OAC3B,IAAIC,OAAJ,WAAeN,EAAEE,OAAOC,OAAS,KAAKI,KAAKF,EAAOG,SAEpDxB,EAAWD,IAwCmCF,OAAQA,IAClD,kBAAC,EAAD,CACE4B,OAlGO,SAACT,GACdA,EAAEC,iBAEF,IAAIS,EAAgBnC,EAAQoC,MAAK,qBAAGH,OAAoB/B,KACpDmC,EAAkBrC,EAAQoC,MAAK,qBAAGE,SAAwBlC,KAC1DmC,EAAevC,EAAQwC,MAAK,gBAAGP,EAAH,EAAGA,KAAMK,EAAT,EAASA,OAAT,OAAqBL,IAAS/B,GAAWoC,IAAWlC,KAEpF,GAAgB,KAAZF,GAAgC,KAAdE,EACpB,OAAOU,EAAiB,6CAA8C,WAEnE,QAAqB2B,IAAjBF,EAoBJ,OAAIJ,GAAiBE,EACjBvB,EAAiB,GAAD,OAAIZ,EAAJ,mBAA8B,YAErDiB,EAAwB,CAAEc,KAAM/B,EAASoC,OAAQlC,IAChDgB,MAAK,SAAAC,GACJpB,EAAW,GAAD,mBAAKD,GAAL,CAAcqB,EAAIC,QAC5BR,EAAiB,SAAD,OAAWO,EAAIC,KAAKW,KAApB,kBAA2C,cAE5DS,OAAM,SAACC,GACNC,QAAQC,MAAMF,EAAIG,SAASxB,KAAKuB,OAChC/B,EAAiB6B,EAAIG,SAASxB,KAAKuB,MAAO,YAE5C1C,EAAW,IACJE,EAAa,KAhCpB,IAAI0C,EAAcR,EAAaN,KAG/B,OAFYe,OAAOC,QAAP,UAAmBF,EAAnB,gDAGH5B,EAA2BoB,EAAa5C,GAAI,CACjD2C,OAAQlC,IAETgB,MAAK,SAAAC,GACJpB,EAAWD,EAAQ6B,QAAO,qBAAGlC,KAAgB0B,EAAIC,KAAK3B,MAAIuD,OAAO7B,EAAIC,OACrER,EAAiB,WAAD,OAAYO,EAAIC,KAAKW,KAArB,iBAA0C,WAC1D9B,EAAW,IACXE,EAAa,OAEdqC,OAAM,SAAAC,GACLC,QAAQO,IAAIR,EAAIG,SAASxB,KAAKuB,OAC9B/B,EAAiB6B,EAAIG,SAASxB,KAAKuB,MAAO,iBAZ9C,GAqFIO,QAAS,SAAC3B,GAAD,OAAOtB,EAAWsB,EAAEE,OAAOC,QACpCK,KAAM/B,EACNmD,UAAW,SAAC5B,GAAD,OAAOpB,EAAaoB,EAAEE,OAAOC,QACxCU,OAAQlC,KAGZ,kBAAC,EAAD,CAAUI,QAASA,EAASR,QAASA,EAASsD,cA7C7B,SAAA7B,GAGnB,GAFAA,EAAEC,iBAEyB,mBAAvBD,EAAEE,OAAOJ,UAAgC,CAC3C,IAAIwB,EAActB,EAAEE,OAAO4B,QAAQ,OAAOC,WAAWC,YACrDC,EAAYjC,EAAEE,OAAO4B,QAAQ,OAAOI,QAAQhE,GAChCqD,OAAOC,QAAP,iBAA0BF,EAA1B,OAGV5B,EAA2BuC,GAC1BtC,MAAK,WACJnB,EAAWD,EAAQ6B,QAAO,qBAAGlC,KAAgB+D,MAC7C5C,EAAiB,GAAD,OAAKiC,EAAL,0BAA2C,cAE5DL,OAAM,SAAAC,GACLC,QAAQC,MAAMF,EAAIG,SAASxB,KAAKuB,OAChC/B,EAAiB6B,EAAIG,SAASxB,KAAKuB,MAAO,kBAsC9Ce,EAAe,SAAC,GAA8B,IAA5BpC,EAA2B,EAA3BA,aAAclB,EAAa,EAAbA,OACpC,OACE,yBAAKX,GAAG,iBACN,2BAAOkE,QAAQ,UAAf,WACA,2BAAOC,SAAUtC,EAAcb,KAAK,SAASiB,MAAOtB,MASpDyD,EAAY,SAAC,GAAkD,IAAhD7B,EAA+C,EAA/CA,OAAQkB,EAAuC,EAAvCA,QAASnB,EAA8B,EAA9BA,KAAMoB,EAAwB,EAAxBA,UAAWf,EAAa,EAAbA,OACrD,OACE,0BAAM0B,SAAU9B,GACd,+CACA,2BAAO2B,QAAQ,QAAf,SACA,2BAAOlD,KAAK,OAAOmD,SAAUV,EAASxB,MAAOK,IAE7C,2BAAO4B,QAAQ,UAAf,WACA,2BAAOlD,KAAK,OAAOmD,SAAUT,EAAWzB,MAAOU,IAC/C,4BAAQ3B,KAAK,UAAb,SASAsD,EAAW,SAAC,GAAyC,IAAvCzD,EAAsC,EAAtCA,QAASR,EAA6B,EAA7BA,QAASsD,EAAoB,EAApBA,cACpC,OACE,yBAAK3D,GAAG,WAAWuE,QAAUZ,GAC3B,uCACa,IAAZ9C,EACGA,EAAQ2D,KAAI,gBAAGlC,EAAH,EAAGA,KAAMK,EAAT,EAASA,OAAQ3C,EAAjB,EAAiBA,GAAjB,OACV,yBAAKyE,IAAMzE,EAAK4B,UAAU,UAAU8C,UAAU1E,GAC5C,2BAAIsC,GACJ,2BAAIK,EAAJ,IAAY,4BAAQf,UAAU,kBAAlB,eAGhBvB,EAAQmE,KAAI,gBAAGlC,EAAH,EAAGA,KAAMK,EAAT,EAASA,OAAQ3C,EAAjB,EAAiBA,GAAjB,OACV,yBAAKyE,IAAMzE,EAAK4B,UAAU,UAAU8C,UAAU1E,GAC5C,2BAAIsC,GACJ,2BAAIK,EAAJ,IAAY,4BAAQf,UAAU,kBAAlB,iBAM1B+C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.148ee5c2.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getContacts = () =>  axios.get(baseUrl);\r\n\r\nconst addContact = contact => axios.post(baseUrl, contact);\r\n\r\nconst updateContact = (id, contact) => axios.put(`${baseUrl}/${id}`, contact);\r\n\r\nconst deleteContact = id => axios.delete(`${baseUrl}/${id}`);\r\n\r\nexport default { \r\n  getContacts: getContacts,\r\n  addContact: addContact,\r\n  updateContact: updateContact,\r\n  deleteContact: deleteContact\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport transactions from './transactions'\r\n/*\r\n=====================\r\nPhonebook\r\n=====================\r\n*/\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([]);\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [newNumber, setNewNumber] = useState(\"\");\r\n  const [search, setSearch] = useState(\"\");\r\n  const [results, setResults] = useState(0);\r\n  const [message, setMessage] = useState({ content: '', type: ''});\r\n\r\n  //notification\r\n  const showNotification = (msg, t) => {\r\n    setMessage({ content : msg, type: t });\r\n    setTimeout(() => setMessage({\r\n      content: '',\r\n      type: ''\r\n    }), 5000);\r\n  }\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    \r\n    let duplicateName = persons.some(({ name }) => name === newName);\r\n    let duplicateNumber = persons.some(({ number }) => number === newNumber);\r\n    let numberUpdate = persons.find(({ name, number}) => name === newName && number !== newNumber);\r\n\r\n    if (newName === \"\" || newNumber === \"\") {\r\n      return showNotification(`Please enter a valid name and phone number`, 'warning');\r\n    } \r\n    else if (numberUpdate !== undefined) {\r\n      let contactName = numberUpdate.name,\r\n      confirmed = window.confirm(`${ contactName } already exists. Do you want to replace it?`)\r\n      \r\n      if (confirmed) {\r\n        return transactions.updateContact(numberUpdate.id, {\r\n          number: newNumber\r\n        })\r\n        .then(res => {\r\n          setPersons(persons.filter(({ id }) => id !== res.data.id).concat(res.data));\r\n          showNotification(`Updated ${res.data.name} successfully`, 'success');\r\n          setNewName(\"\");\r\n          setNewNumber(\"\");\r\n        })\r\n        .catch(err => {\r\n          console.log(err.response.data.error)\r\n          showNotification(err.response.data.error, 'error');\r\n        });\r\n      }\r\n    } \r\n    else if (duplicateName && duplicateNumber) {\r\n      return showNotification(`${newName} already exists`, 'warning');\r\n    } else {\r\n      transactions.addContact({ name: newName, number: newNumber })\r\n      .then(res => {\r\n        setPersons([...persons, res.data]);\r\n        showNotification(`Added ${ res.data.name } successfully!`, 'success')\r\n      })\r\n      .catch((err) => {\r\n        console.error(err.response.data.error);\r\n        showNotification(err.response.data.error, 'error');\r\n      })\r\n      setNewName(\"\");\r\n      return setNewNumber(\"\");\r\n    }\r\n  };\r\n\r\n  const handleSearch = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (e.target.value === 0) return setResults(0);\r\n\r\n    setSearch(e.target.value);\r\n    let results = persons.filter((person) =>\r\n      new RegExp(`^${e.target.value}`, \"i\").test(person.name)\r\n    );\r\n    setResults(results);\r\n  };\r\n\r\n  //delete\r\n  const handleDelete = e => {\r\n    e.preventDefault();\r\n\r\n    if (e.target.className === 'delete-contact') {\r\n      let contactName = e.target.closest('div').firstChild.textContent,\r\n      contactId = e.target.closest('div').dataset.id,\r\n      confirmed = window.confirm(`Delete ${ contactName }?`);\r\n\r\n      if (confirmed) {\r\n        transactions.deleteContact(contactId)\r\n        .then(() => {\r\n          setPersons(persons.filter(({ id }) => id !== contactId));\r\n          showNotification(`${ contactName } deleted successfully!`, 'success')\r\n        })\r\n        .catch(err => {\r\n          console.error(err.response.data.error)\r\n          showNotification(err.response.data.error, 'error')\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    transactions.getContacts('http://localhost:3001/persons')\r\n    .then(res => setPersons(res.data))\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"phonebook\">\r\n      <h2>Phonebook</h2>\r\n      {\r\n        message.content !== '' ?\r\n        <p className={`message message-${message.type}`}>{ message.content }</p> :\r\n        ''\r\n      }\r\n      <div id=\"left\">\r\n        <SearchFilter handleSearch={handleSearch} search={search} />\r\n        <AddPerson\r\n          submit={submit}\r\n          setName={(e) => setNewName(e.target.value)}\r\n          name={newName}\r\n          setNumber={(e) => setNewNumber(e.target.value)}\r\n          number={newNumber}\r\n        />\r\n      </div>\r\n      <Contacts results={results} persons={persons} deleteContact={ handleDelete } />\r\n    </div>\r\n  );\r\n};\r\n/*\r\n=====================\r\nFilter\r\n=====================\r\n*/\r\nconst SearchFilter = ({ handleSearch, search }) => {\r\n  return (\r\n    <div id=\"search-filter\">\r\n      <label htmlFor=\"search\">Search:</label>\r\n      <input onChange={handleSearch} type=\"search\" value={search} />\r\n    </div>\r\n  );\r\n};\r\n/*\r\n========================\r\nForm for adding contacts\r\n========================\r\n*/\r\nconst AddPerson = ({ submit, setName, name, setNumber, number }) => {\r\n  return (\r\n    <form onSubmit={submit}>\r\n      <h3>Add new contact</h3>\r\n      <label htmlFor=\"name\">Name:</label>\r\n      <input type=\"text\" onChange={setName} value={name} />\r\n\r\n      <label htmlFor=\"number\">Number:</label>\r\n      <input type=\"text\" onChange={setNumber} value={number} />\r\n      <button type=\"submit\">Add</button>\r\n    </form>\r\n  );\r\n};\r\n/*\r\n=====================\r\nContacts\r\n=====================\r\n*/\r\nconst Contacts = ({ results, persons, deleteContact }) => {\r\n  return (\r\n    <div id=\"contacts\" onClick={ deleteContact }>\r\n      <h2>Numbers</h2>\r\n      {results !== 0\r\n        ? results.map(({ name, number, id }) => (\r\n            <div key={ id } className=\"contact\" data-id={ id }>\r\n              <p>{name}</p>\r\n              <p>{number} <button className=\"delete-contact\">Delete</button></p>\r\n            </div>\r\n          ))\r\n        : persons.map(({ name, number, id }) => (\r\n            <div key={ id } className=\"contact\" data-id={ id }>\r\n              <p>{name}</p>\r\n              <p>{number} <button className=\"delete-contact\">Delete</button></p>\r\n            </div>\r\n          ))}\r\n    </div>\r\n  );\r\n};\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}